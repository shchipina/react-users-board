{"version":3,"sources":["components/UserList.tsx","components/AddUserForm.tsx","components/AppContainer.tsx","api/fetchClient.ts","services/user.service.ts","services/color.service.ts","App.tsx","helpers.ts","index.tsx"],"names":["UserList","React","memo","users","map","user","ListItemButton","ListItemIcon","fontSize","style","color","carColor","name","ListItemText","primary","id","AddUserForm","colors","addUser","useState","setName","colorId","setColorId","isNameError","setIsNameError","isColorError","setIsColorError","selectedColor","find","c","onSubmit","e","preventDefault","Divider","padding","display","alignItems","justifyContent","TextField","variant","label","width","value","onChange","target","error","Select","MenuItem","disabled","LoadingButton","type","AppContainer","children","Paper","elevation","position","top","left","transform","Typography","textAlign","marginBottom","BASE_URL","process","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","ok","Error","json","client","getUsers","a","createUser","carColorId","getColors","App","setUsers","setColors","preparedUsers","prepareUsers","useEffect","useCallback","createdUser","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd2d05d2.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\nimport DirectionsCarFilledIcon from '@mui/icons-material/DirectionsCarFilled';\nimport { UserWithColor } from '../types';\n\ninterface Props {\n  users: UserWithColor[];\n}\n\nexport const UserList: FC<Props> = React.memo(({ users }) => {\n  return (\n    <>\n      {users.map(user => (\n        <ListItemButton key={user.id}>\n          <ListItemIcon>\n            <DirectionsCarFilledIcon fontSize=\"large\" style={{ color: user?.carColor?.name || 'black' }} />\n          </ListItemIcon>\n          <ListItemText primary={user.name} />\n        </ListItemButton>\n      ))}\n    </>\n  );\n});\n","import React, { FC, useState } from 'react';\nimport {\n  Divider, MenuItem, Select, TextField,\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Color } from '../types';\n\ninterface Props {\n  colors: Color[];\n  addUser: (name: string, carColorId: number) => void;\n}\n\nexport const AddUserForm: FC<Props> = React.memo(({ colors, addUser }) => {\n  const [name, setName] = useState('');\n  const [colorId, setColorId] = useState(0);\n  const [isNameError, setIsNameError] = useState(false);\n  const [isColorError, setIsColorError] = useState(false);\n\n  const selectedColor = colors.find(c => c.id === colorId);\n\n  const onSubmit = () => {\n    if (!name || !colorId) {\n      setIsNameError(!name);\n      setIsColorError(!colorId);\n\n      return;\n    }\n\n    addUser(name, colorId);\n\n    setName('');\n    setColorId(0);\n  };\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        onSubmit();\n      }}\n    >\n      <Divider />\n\n      <div style={{\n        padding: '16px 0 16px', display: 'flex', alignItems: 'end', justifyContent: 'space-between',\n      }}\n      >\n        <TextField\n          variant=\"standard\"\n          label=\"Name\"\n          style={{ width: '45%' }}\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n            setIsNameError(false);\n          }}\n          error={isNameError}\n        />\n\n        <Select\n          label=\"Car color\"\n          style={{ width: '45%', color: selectedColor?.name || 'currentColor' }}\n          variant=\"standard\"\n          value={colorId}\n          onChange={e => {\n            setIsColorError(false);\n            setColorId(+e.target.value);\n          }}\n          error={isColorError}\n        >\n          <MenuItem value={0} disabled>\n            Color\n          </MenuItem>\n          {colors.map(color => (\n            <MenuItem\n              key={color.id}\n              style={{ color: color.name }}\n              value={color.id}\n            >\n              {color.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </div>\n      <LoadingButton\n        type=\"submit\"\n        variant=\"outlined\"\n        style={{ width: '100%' }}\n      >\n        Add new player\n      </LoadingButton>\n    </form>\n  );\n});\n","import React, { FC } from 'react';\nimport { Divider, Paper, Typography } from '@mui/material';\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport const AppContainer: FC<Props> = React.memo(({ children }) => {\n  return (\n    <Paper\n      elevation={10}\n      style={{\n        padding: '20px',\n        width: '30%',\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Typography\n        variant=\"h2\"\n        style={{ textAlign: 'center', marginBottom: '16px' }}\n      >\n        Users`\n        board\n      </Typography>\n\n      {children}\n\n      <Divider />\n    </Paper>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = process.env.REACT_APP_BASE_URL;\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../api/fetchClient';\nimport { User } from '../types';\n\nexport const getUsers = async () => client.get<User[]>('/users');\n\nexport const createUser = async (name: string, carColorId: number) => {\n  return client.post<User>('/users', { name, carColorId });\n};\n","import { client } from '../api/fetchClient';\nimport { Color } from '../types';\n\nexport const getColors = async () => client.get<Color[]>('/colors');\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\n// import { PropTypes } from '@mui/material';\nimport { UserList } from './components/UserList';\nimport { AddUserForm } from './components/AddUserForm';\nimport { AppContainer } from './components/AppContainer';\nimport { Color, User } from './types';\nimport { prepareUsers } from './helpers';\nimport { createUser, getUsers } from './services/user.service';\nimport { getColors } from './services/color.service';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [colors, setColors] = useState<Color[]>([]);\n\n  const preparedUsers = prepareUsers(users, colors);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n\n    getColors()\n      .then(setColors);\n  }, []);\n\n  const addUser = useCallback(async (name: string, carColorId: number) => {\n    const createdUser = await createUser(name, carColorId);\n\n    setUsers((prev) => [...prev, createdUser]);\n  }, []);\n\n  return (\n    <AppContainer>\n      <UserList users={preparedUsers} />\n\n      <AddUserForm colors={colors} addUser={addUser} />\n    </AppContainer>\n  );\n};\n","import { Color, User } from './types';\n\nexport const prepareUsers = (users: User[], colors: Color[]) => {\n  return users.map(user => ({\n    ...user,\n    carColor: colors.find(color => color.id === user.carColorId),\n  }));\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}